/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianRewardHubPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

const DEFAULT_SETTINGS = {
  currentXP: 0,
  currentLevel: 1,
  showNotifications: true,
  customLevelMessages: {},
  customLevelImages: {},
  specialDates: [
    {
      id: "new-year",
      date: "01-01",
      message: "Chúc mừng năm mới! Hãy tiếp tục hành trình ghi chú! 🎊",
      imagePath: "",
      enabled: true
    },
    {
      id: "valentine",
      date: "02-14",
      message: "Happy Valentine's Day! Tình yêu với việc ghi chú! ❤️",
      imagePath: "",
      enabled: true
    },
    {
      id: "womens-day",
      date: "03-08",
      message: "Chúc mừng ngày Quốc tế Phụ nữ! 🌸",
      imagePath: "",
      enabled: true
    },
    {
      id: "independence-day",
      date: "09-02",
      message: "Chúc mừng Quốc khánh Việt Nam! 🇻🇳",
      imagePath: "",
      enabled: true
    },
    {
      id: "christmas",
      date: "12-25",
      message: "Merry Christmas! Giáng sinh an lành! 🎄🎅",
      imagePath: "",
      enabled: true
    }
  ],
  debugNotifications: [
    {
      id: "test-1",
      name: "Test Birthday",
      message: "Chúc mừng sinh nhật! 🎂🎉",
      imagePath: ""
    },
    {
      id: "test-2",
      name: "Test Achievement",
      message: "Bạn đã hoàn thành thành tựu! 🏆✨",
      imagePath: ""
    }
  ],
  lastActiveDate: "",
  dailyXPMultiplier: 1,
  reviewXPMultiplier: 2
};

class ObsidianRewardHubPlugin extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.fileModificationTimes = /* @__PURE__ */ new Map();
  }
  async onload() {
    try {
      await this.loadSettings();
      this.statusBarItem = this.addStatusBarItem();
      this.updateStatusBar();
      this.registerEvent(
        this.app.vault.on("modify", this.onFileModify.bind(this))
      );
      this.registerEvent(
        this.app.workspace.on("file-open", this.onFileOpen.bind(this))
      );
      setTimeout(() => {
        this.checkSpecialDates();
      }, 1e3);
      this.addSettingTab(new RewardHubSettingTab(this.app, this));
      this.addCommand({
        id: "show-reward-info",
        name: "Show Reward Hub Information",
        callback: () => {
          new RewardInfoModal(this.app, this).open();
        }
      });
      this.addCommand({
        id: "add-bonus-xp",
        name: "Add Bonus XP",
        callback: () => {
          new BonusXPModal(this.app, this).open();
        }
      });
      this.addCommand({
        id: "debug-notifications",
        name: "Debug/Test Notifications",
        callback: () => {
          new DebugNotificationModal(this.app, this).open();
        }
      });
      if (this.settings.currentXP === 0) {
        setTimeout(() => {
          new WelcomeModal(this.app).open();
        }, 2e3);
      }
      console.log("Obsidian Reward Hub Plugin loaded successfully!");
    } catch (error) {
      console.error("Error loading Obsidian Reward Hub Plugin:", error);
      new import_obsidian.Notice("Lỗi khi tải Reward Hub Plugin: " + error.message);
    }
  }
  onunload() {
    console.log("Obsidian Reward Hub Plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    if (!this.settings.debugNotifications) {
      this.settings.debugNotifications = DEFAULT_SETTINGS.debugNotifications;
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateStatusBar();
  }
  calculateLevelFromXP(xp) {
    return Math.floor(Math.sqrt(xp / 100)) + 1;
  }
  calculateXPForLevel(level) {
    return Math.pow(level - 1, 2) * 100;
  }
  calculateXPForNextLevel(currentLevel) {
    return this.calculateXPForLevel(currentLevel + 1);
  }
  addXP(amount, reason = "") {
    const oldLevel = this.settings.currentLevel;
    this.settings.currentXP += amount;
    this.settings.currentLevel = this.calculateLevelFromXP(this.settings.currentXP);
    if (this.settings.currentLevel > oldLevel) {
      this.onLevelUp(oldLevel, this.settings.currentLevel);
    }
    this.saveSettings();
    if (reason) {
      new import_obsidian.Notice(`🎁 +${amount} XP: ${reason}`, 3e3);
    }
  }
  onLevelUp(oldLevel, newLevel) {
    const isRoundLevel = newLevel % 10 === 0 || newLevel % 100 === 0;
    if (isRoundLevel && this.settings.showNotifications) {
      const customMessage = this.settings.customLevelMessages[newLevel];
      const customImage = this.settings.customLevelImages[newLevel];
      new LevelUpModal(
        this.app,
        newLevel,
        customMessage || `🎉 Chúc mừng! Bạn đã đạt Level ${newLevel} trong Reward Hub! 🏆`,
        customImage
      ).open();
    } else {
      new import_obsidian.Notice(`🌟 Level Up! Bạn đã đạt Level ${newLevel}! 🚀`, 5e3);
    }
  }
  async onFileModify(file) {
    try {
      if (file.extension !== "md") return;
      const currentTime = Date.now();
      const lastModified = this.fileModificationTimes.get(file.path) || 0;
      const timeDiff = currentTime - lastModified;
      if (timeDiff < 5e3) {
        this.addXP(1, "Ghi chú");
      } else {
        const isOldNote = this.isOldNote(file);
        if (isOldNote) {
          this.addXP(Math.floor(5 * this.settings.reviewXPMultiplier), "Review ghi chú cũ");
        } else {
          this.addXP(2, "Chỉnh sửa ghi chú");
        }
      }
      this.fileModificationTimes.set(file.path, currentTime);
    } catch (error) {
      console.error("Error in onFileModify:", error);
    }
  }
  async onFileOpen(file) {
    try {
      if (!file || file.extension !== "md") return;
      const isOldNote = this.isOldNote(file);
      if (isOldNote) {
        this.addXP(Math.floor(3 * this.settings.reviewXPMultiplier), "Xem lại ghi chú cũ");
      }
    } catch (error) {
      console.error("Error in onFileOpen:", error);
    }
  }
  isOldNote(file) {
    const now = Date.now();
    const fileAge = now - file.stat.ctime;
    const sevenDaysInMs = 7 * 24 * 60 * 60 * 1e3;
    return fileAge > sevenDaysInMs;
  }
  updateStatusBar() {
    try {
      const currentXP = this.settings.currentXP;
      const currentLevel = this.settings.currentLevel;
      const nextLevelXP = this.calculateXPForNextLevel(currentLevel);
      const currentLevelXP = this.calculateXPForLevel(currentLevel);
      const progress = currentXP - currentLevelXP;
      const needed = nextLevelXP - currentLevelXP;
      const percentage = Math.round(progress / needed * 100);
      this.statusBarItem.setText(
        `🎮 Reward Hub | Lv.${currentLevel} | ${progress}/${needed} XP (${percentage}%)`
      );
      this.statusBarItem.title = `Obsidian Reward Hub
Total XP: ${currentXP}
Next Level: ${nextLevelXP - currentXP} XP needed`;
    } catch (error) {
      console.error("Error updating status bar:", error);
    }
  }
  checkSpecialDates() {
    try {
      const today = /* @__PURE__ */ new Date();
      const todayString = `${(today.getMonth() + 1).toString().padStart(2, "0")}-${today.getDate().toString().padStart(2, "0")}`;
      this.settings.specialDates.forEach((specialDate) => {
        if (specialDate.enabled && specialDate.date === todayString) {
          setTimeout(() => {
            new SpecialDateModal(
              this.app,
              specialDate.message,
              specialDate.imagePath
            ).open();
          }, 3e3);
        }
      });
    } catch (error) {
      console.error("Error checking special dates:", error);
    }
  }
  showTestNotification(message, imagePath) {
    new SpecialDateModal(this.app, message, imagePath).open();
  }
}

class DebugNotificationModal extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "🔧 Debug/Test Notifications" });
    const quickTestContainer = contentEl.createDiv({ cls: "debug-section" });
    quickTestContainer.createEl("h3", { text: "⚡ Quick Tests" });
    new import_obsidian.Setting(quickTestContainer).setName("Test Level Up").setDesc("Test level up notification").addButton((btn) => btn.setButtonText("🎉 Test Level Up").onClick(() => {
      new LevelUpModal(
        this.app,
        50,
        "Test Level Up Message! 🎊",
        ""
      ).open();
    }));
    new import_obsidian.Setting(quickTestContainer).setName("Test Special Date").setDesc("Test special date notification").addButton((btn) => btn.setButtonText("🎊 Test Special Date").onClick(() => {
      new SpecialDateModal(
        this.app,
        "Test Special Date Message! 🎈",
        ""
      ).open();
    }));
    const debugContainer = contentEl.createDiv({ cls: "debug-section" });
    debugContainer.createEl("h3", { text: "🛠️ Custom Debug Notifications" });
    this.plugin.settings.debugNotifications.forEach((debug, index) => {
      new import_obsidian.Setting(debugContainer).setName(`🧪 ${debug.name}`).setDesc(debug.message.substring(0, 40) + "...").addButton((btn) => btn.setButtonText("📝 Edit").onClick(() => {
        new DebugEditModal(this.app, this.plugin, debug, () => {
          this.display();
        }).open();
      })).addButton((btn) => btn.setButtonText("🚀 Test").setCta().onClick(() => {
        this.plugin.showTestNotification(debug.message, debug.imagePath);
      })).addButton((btn) => btn.setButtonText("🗑️ Delete").setWarning().onClick(async () => {
        this.plugin.settings.debugNotifications.splice(index, 1);
        await this.plugin.saveSettings();
        new import_obsidian.Notice("Đã xóa debug notification");
        this.display();
      }));
    });
    new import_obsidian.Setting(debugContainer).addButton((btn) => btn.setButtonText("➕ Add Debug Notification").onClick(() => {
      const newDebug = {
        id: Date.now().toString(),
        name: "New Test",
        message: "Test message",
        imagePath: ""
      };
      new DebugEditModal(this.app, this.plugin, newDebug, () => {
        this.display();
      }, true).open();
    }));
    const closeButton = contentEl.createEl("button", { text: "Close", cls: "mod-cta" });
    closeButton.style.marginTop = "20px";
    closeButton.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  display() {
    this.onOpen();
  }
}

class DebugEditModal extends import_obsidian.Modal {
  constructor(app, plugin, debug, onSave, isNew = false) {
    super(app);
    this.plugin = plugin;
    this.debug = debug;
    this.onSave = onSave;
    this.isNew = isNew;
    this.name = debug.name;
    this.message = debug.message;
    this.imagePath = debug.imagePath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.isNew ? "➕ Add Debug Notification" : "✏️ Edit Debug Notification" });
    new import_obsidian.Setting(contentEl).setName("Tên").setDesc("Tên để nhận diện debug notification").addText((text) => text.setValue(this.name).onChange((value) => {
      this.name = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Message").setDesc("Nội dung thông báo test").addTextArea((text) => {
      text.setValue(this.message);
      text.inputEl.rows = 4;
      text.onChange((value) => {
        this.message = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Đường dẫn hình ảnh").setDesc("Đường dẫn đến file hình ảnh (tùy chọn)").addText((text) => text.setPlaceholder("https://example.com/image.jpg hoặc local/path/image.png").setValue(this.imagePath).onChange((value) => {
      this.imagePath = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Test Preview").setDesc("Xem trước thông báo với nội dung hiện tại").addButton((btn) => btn.setButtonText("🔍 Preview").onClick(() => {
      this.plugin.showTestNotification(this.message, this.imagePath);
    }));
    const buttonContainer = contentEl.createDiv({ cls: "debug-buttons" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const saveBtn = buttonContainer.createEl("button", { text: "💾 Save", cls: "mod-cta" });
    saveBtn.addEventListener("click", async () => {
      if (!this.name.trim()) {
        new import_obsidian.Notice("Vui lòng nhập tên!");
        return;
      }
      if (!this.message.trim()) {
        new import_obsidian.Notice("Vui lòng nhập message!");
        return;
      }
      const updatedDebug = {
        id: this.debug.id,
        name: this.name,
        message: this.message,
        imagePath: this.imagePath
      };
      if (this.isNew) {
        this.plugin.settings.debugNotifications.push(updatedDebug);
      } else {
        const index = this.plugin.settings.debugNotifications.findIndex((d) => d.id === this.debug.id);
        if (index !== -1) {
          this.plugin.settings.debugNotifications[index] = updatedDebug;
        }
      }
      await this.plugin.saveSettings();
      new import_obsidian.Notice(this.isNew ? "Đã thêm debug notification!" : "Đã cập nhật debug notification!");
      this.onSave();
      this.close();
    });
    const cancelBtn = buttonContainer.createEl("button", { text: "❌ Cancel" });
    cancelBtn.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class WelcomeModal extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("reward-hub-modal");
    const header = contentEl.createEl("div", { cls: "welcome-header" });
    header.createEl("h1", { text: "🎉 Chào mừng đến với Reward Hub! 🎉", cls: "welcome-title" });
    const content = contentEl.createDiv({ cls: "welcome-content" });
    content.innerHTML = `
            <div class="welcome-info">
                <h3>🎮 Hệ thống Gamification cho Obsidian</h3>
                <p>Reward Hub sẽ biến việc ghi chú thành một trải nghiệm thú vị với:</p>
                <ul>
                    <li>🏆 <strong>Hệ thống Level:</strong> Tăng level khi tích lũy XP</li>
                    <li>⭐ <strong>Kiếm XP:</strong> Mỗi hoạt động ghi chú đều được thưởng</li>
                    <li>🎁 <strong>Review Bonus:</strong> Điểm thưởng cao khi xem lại ghi chú cũ</li>
                    <li>🎊 <strong>Ngày Đặc Biệt:</strong> Thông báo tự động cho các ngày quan trọng</li>
                    <li>🏅 <strong>Thành Tựu:</strong> Thông báo đặc biệt cho level milestone</li>
                </ul>
                
                <div class="xp-guide">
                    <h4>💡 Cách kiếm XP:</h4>
                    <ul>
                        <li>Gõ ký tự: <span class="xp-value">+1 XP</span></li>
                        <li>Chỉnh sửa ghi chú: <span class="xp-value">+2 XP</span></li>
                        <li>Xem ghi chú cũ: <span class="xp-value">+6 XP</span></li>
                        <li>Sửa ghi chú cũ: <span class="xp-value">+10 XP</span></li>
                    </ul>
                </div>
                
                <p class="welcome-footer">
                    <strong>Bắt đầu viết để kiếm XP đầu tiên! 🚀</strong>
                </p>
            </div>
        `;
    const button = contentEl.createEl("button", { text: "Bắt đầu hành trình! 🎯", cls: "mod-cta welcome-button" });
    button.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class LevelUpModal extends import_obsidian.Modal {
  constructor(app, level, message, imagePath) {
    super(app);
    this.level = level;
    this.message = message;
    this.imagePath = imagePath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("reward-hub-modal");
    const header = contentEl.createEl("div", { cls: "level-up-header" });
    header.createEl("h1", { text: "🎉 REWARD HUB LEVEL UP! 🎉", cls: "level-up-title" });
    header.createEl("h2", { text: `Level ${this.level}`, cls: "level-number" });
    if (this.imagePath && this.imagePath.trim()) {
      const imgContainer = contentEl.createEl("div", { cls: "level-image-container" });
      const img = imgContainer.createEl("img", { cls: "level-image" });
      img.src = this.imagePath;
      img.style.maxWidth = "300px";
      img.style.maxHeight = "300px";
      img.style.display = "block";
      img.style.margin = "20px auto";
      img.style.borderRadius = "10px";
      img.style.boxShadow = "0 4px 15px rgba(0,0,0,0.3)";
    }
    const messageEl = contentEl.createEl("p", { text: this.message, cls: "level-message" });
    messageEl.style.fontSize = "1.2em";
    messageEl.style.margin = "20px 0";
    const buttonContainer = contentEl.createEl("div", { cls: "level-button-container" });
    const button = buttonContainer.createEl("button", { text: "Awesome! 🚀", cls: "mod-cta" });
    button.style.fontSize = "1.1em";
    button.style.padding = "10px 20px";
    button.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class SpecialDateModal extends import_obsidian.Modal {
  constructor(app, message, imagePath) {
    super(app);
    this.message = message;
    this.imagePath = imagePath;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("reward-hub-modal");
    const header = contentEl.createEl("div", { cls: "special-date-header" });
    header.createEl("h1", { text: "🎊 Reward Hub - Ngày Đặc Biệt! 🎊", cls: "special-date-title" });
    if (this.imagePath && this.imagePath.trim()) {
      const imgContainer = contentEl.createEl("div", { cls: "special-image-container" });
      const img = imgContainer.createEl("img", { cls: "special-image" });
      img.src = this.imagePath;
      img.style.maxWidth = "300px";
      img.style.maxHeight = "300px";
      img.style.display = "block";
      img.style.margin = "20px auto";
      img.style.borderRadius = "10px";
      img.style.boxShadow = "0 4px 15px rgba(0,0,0,0.3)";
    }
    const messageEl = contentEl.createEl("p", { text: this.message, cls: "special-message" });
    messageEl.style.fontSize = "1.2em";
    messageEl.style.margin = "20px 0";
    messageEl.style.textAlign = "center";
    const buttonContainer = contentEl.createEl("div", { cls: "special-button-container" });
    const button = buttonContainer.createEl("button", { text: "Cảm ơn Reward Hub! 💖", cls: "mod-cta" });
    button.style.fontSize = "1.1em";
    button.style.padding = "10px 20px";
    button.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class RewardInfoModal extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "📊 Obsidian Reward Hub - Thông Tin Level" });
    const currentXP = this.plugin.settings.currentXP;
    const currentLevel = this.plugin.settings.currentLevel;
    const nextLevelXP = this.plugin.calculateXPForNextLevel(currentLevel);
    const currentLevelXP = this.plugin.calculateXPForLevel(currentLevel);
    const progressXP = currentXP - currentLevelXP;
    const neededXP = nextLevelXP - currentLevelXP;
    const progressPercent = Math.round(progressXP / neededXP * 100);
    const stats = contentEl.createDiv({ cls: "reward-stats" });
    stats.innerHTML = `
            <div class="stat-item">
                <span class="stat-label">🏆 Level hiện tại:</span>
                <span class="stat-value">${currentLevel}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">⭐ Tổng XP:</span>
                <span class="stat-value">${currentXP}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">🎯 XP đến level tiếp:</span>
                <span class="stat-value">${nextLevelXP - currentXP}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">📈 Tiến độ:</span>
                <span class="stat-value">${progressXP}/${neededXP} (${progressPercent}%)</span>
            </div>
        `;
    const progressContainer = contentEl.createDiv({ cls: "progress-container" });
    progressContainer.innerHTML = `
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${progressPercent}%"></div>
            </div>
        `;
    const tips = contentEl.createDiv({ cls: "reward-tips" });
    tips.innerHTML = `
            <h3>💡 Cách kiếm XP trong Reward Hub:</h3>
            <ul>
                <li>✍️ Gõ ký tự liên tục: <strong>+1 XP</strong></li>
                <li>📝 Chỉnh sửa ghi chú: <strong>+2 XP</strong></li>
                <li>👀 Xem ghi chú cũ (>7 ngày): <strong>+${Math.floor(3 * this.plugin.settings.reviewXPMultiplier)} XP</strong></li>
                <li>🔄 Review/sửa ghi chú cũ: <strong>+${Math.floor(5 * this.plugin.settings.reviewXPMultiplier)} XP</strong></li>
            </ul>
            <p class="tip-highlight">💎 <strong>Mẹo:</strong> Thường xuyên xem lại và cập nhật ghi chú cũ để kiếm nhiều XP hơn!</p>
        `;
    const button = contentEl.createEl("button", { text: "Đóng", cls: "mod-cta" });
    button.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class BonusXPModal extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.bonusAmount = 10;
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "🎁 Reward Hub - Thêm Bonus XP" });
    new import_obsidian.Setting(contentEl).setName("Số lượng XP").setDesc("Nhập số XP muốn thêm (cho debug hoặc thưởng đặc biệt)").addText((text) => text.setValue(this.bonusAmount.toString()).onChange((value) => {
      this.bonusAmount = parseInt(value) || 10;
    }));
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    buttonContainer.style.marginTop = "20px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const addBtn = buttonContainer.createEl("button", { text: "Thêm XP", cls: "mod-cta" });
    addBtn.addEventListener("click", () => {
      this.plugin.addXP(this.bonusAmount, "Bonus XP từ Reward Hub");
      this.close();
    });
    const cancelBtn = buttonContainer.createEl("button", { text: "Hủy" });
    cancelBtn.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class RewardHubSettingTab extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "⚙️ Obsidian Reward Hub - Cài Đặt" });
    const currentXP = this.plugin.settings.currentXP;
    const currentLevel = this.plugin.settings.currentLevel;
    const nextLevelXP = this.plugin.calculateXPForNextLevel(currentLevel);
    const progressPercent = Math.round((currentXP - this.plugin.calculateXPForLevel(currentLevel)) / (nextLevelXP - this.plugin.calculateXPForLevel(currentLevel)) * 100);
    new import_obsidian.Setting(containerEl).setName("🎮 Trạng Thái Reward Hub").setDesc(`Level: ${currentLevel} | Total XP: ${currentXP} | Tiến độ: ${progressPercent}%`).addButton((btn) => btn.setButtonText("🔄 Reset Progress").setWarning().onClick(async () => {
      this.plugin.settings.currentXP = 0;
      this.plugin.settings.currentLevel = 1;
      await this.plugin.saveSettings();
      new import_obsidian.Notice("Đã reset tiến độ Reward Hub!");
      this.display();
    })).addButton((btn) => btn.setButtonText("📊 Xem Chi Tiết").onClick(() => {
      new RewardInfoModal(this.app, this.plugin).open();
    }));
    new import_obsidian.Setting(containerEl).setName("🔔 Hiển thị thông báo level up").setDesc("Hiển thị thông báo đặc biệt khi đạt level tròn chục (10, 20, 100, ...)").addToggle((toggle) => toggle.setValue(this.plugin.settings.showNotifications).onChange(async (value) => {
      this.plugin.settings.showNotifications = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("📈 Hệ số XP Review").setDesc("Hệ số nhân cho XP khi xem/sửa ghi chú cũ (khuyến khích review)").addSlider((slider) => slider.setLimits(1, 5, 0.5).setValue(this.plugin.settings.reviewXPMultiplier).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.reviewXPMultiplier = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "🔧 Debug/Test Tools" });
    new import_obsidian.Setting(containerEl).setName("🧪 Debug Notifications").setDesc("Công cụ test và debug thông báo").addButton((btn) => btn.setButtonText("🛠️ Open Debug Tools").onClick(() => {
      new DebugNotificationModal(this.app, this.plugin).open();
    }));
    containerEl.createEl("h3", { text: "🎨 Tùy Chỉnh Level Messages & Hình Ảnh" });
    const levelContainer = containerEl.createDiv();
    this.displayCustomLevels(levelContainer);
    new import_obsidian.Setting(containerEl).addButton((btn) => btn.setButtonText("➕ Thêm Custom Level").onClick(() => {
      new CustomLevelModal(this.app, this.plugin, () => {
        this.display();
      }).open();
    }));
    containerEl.createEl("h3", { text: "📅 Ngày Đặc Biệt" });
    const datesContainer = containerEl.createDiv();
    this.displaySpecialDates(datesContainer);
    new import_obsidian.Setting(containerEl).addButton((btn) => btn.setButtonText("➕ Thêm Ngày Đặc Biệt").onClick(() => {
      new SpecialDateEditModal(this.app, this.plugin, () => {
        this.display();
      }).open();
    }));
    containerEl.createEl("hr");
    const infoDiv = containerEl.createDiv({ cls: "reward-hub-info" });
    infoDiv.innerHTML = `
            <h4>📋 Thông Tin Plugin</h4>
            <p><strong>Plugin:</strong> Obsidian Reward Hub v1.0.0</p>
            <p><strong>Tác giả:</strong> sonct</p>
            <p><strong>Mô tả:</strong> Hệ thống gamification cho Obsidian với XP, levels và thông báo ngày đặc biệt</p>
        `;
  }
  displayCustomLevels(container) {
    container.empty();
    const entries = Object.entries(this.plugin.settings.customLevelMessages);
    if (entries.length === 0) {
      container.createEl("p", { text: "Chưa có custom level nào. Hãy thêm để tùy chỉnh thông báo!", cls: "setting-item-description" });
      return;
    }
    entries.forEach(([level, message]) => {
      const levelNum = parseInt(level);
      const setting = new import_obsidian.Setting(container).setName(`🏆 Level ${level}`).setDesc(message.substring(0, 50) + (message.length > 50 ? "..." : "")).addButton((btn) => btn.setButtonText("✏️").setTooltip("Sửa").onClick(() => {
        new CustomLevelModal(this.app, this.plugin, () => {
          this.display();
        }, levelNum).open();
      })).addButton((btn) => btn.setButtonText("🗑️").setTooltip("Xóa").setWarning().onClick(async () => {
        delete this.plugin.settings.customLevelMessages[levelNum];
        delete this.plugin.settings.customLevelImages[levelNum];
        await this.plugin.saveSettings();
        new import_obsidian.Notice(`Đã xóa custom level ${level}`);
        this.display();
      }));
    });
  }
  displaySpecialDates(container) {
    container.empty();
    if (this.plugin.settings.specialDates.length === 0) {
      container.createEl("p", { text: "Chưa có ngày đặc biệt nào.", cls: "setting-item-description" });
      return;
    }
    this.plugin.settings.specialDates.forEach((specialDate, index) => {
      const setting = new import_obsidian.Setting(container).setName(`📅 ${specialDate.date}`).setDesc(specialDate.message.substring(0, 50) + (specialDate.message.length > 50 ? "..." : "")).addToggle((toggle) => toggle.setValue(specialDate.enabled).setTooltip("Bật/tắt").onChange(async (value) => {
        this.plugin.settings.specialDates[index].enabled = value;
        await this.plugin.saveSettings();
      })).addButton((btn) => btn.setButtonText("✏️").setTooltip("Sửa").onClick(() => {
        new SpecialDateEditModal(this.app, this.plugin, () => {
          this.display();
        }, specialDate).open();
      })).addButton((btn) => btn.setButtonText("🗑️").setTooltip("Xóa").setWarning().onClick(async () => {
        this.plugin.settings.specialDates.splice(index, 1);
        await this.plugin.saveSettings();
        new import_obsidian.Notice("Đã xóa ngày đặc biệt");
        this.display();
      }));
    });
  }
}

class CustomLevelModal extends import_obsidian.Modal {
  constructor(app, plugin, onSave, editingLevel) {
    super(app);
    this.level = 10;
    this.message = "";
    this.imagePath = "";
    this.plugin = plugin;
    this.onSave = onSave;
    this.editingLevel = editingLevel;
    if (editingLevel) {
      this.level = editingLevel;
      this.message = plugin.settings.customLevelMessages[editingLevel] || "";
      this.imagePath = plugin.settings.customLevelImages[editingLevel] || "";
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.editingLevel ? "✏️ Sửa Custom Level" : "➕ Thêm Custom Level" });
    new import_obsidian.Setting(contentEl).setName("Level").setDesc("Số level (phải chia hết cho 10 hoặc 100)").addText((text) => text.setValue(this.level.toString()).onChange((value) => {
      this.level = parseInt(value) || 10;
    }));
    new import_obsidian.Setting(contentEl).setName("Message").setDesc("Thông báo tùy chỉnh khi đạt level này trong Reward Hub").addTextArea((text) => {
      text.setValue(this.message);
      text.inputEl.rows = 4;
      text.onChange((value) => {
        this.message = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Đường dẫn hình ảnh").setDesc("Đường dẫn đến file hình ảnh (tùy chọn)").addText((text) => text.setPlaceholder("https://example.com/image.jpg hoặc local/path/image.png").setValue(this.imagePath).onChange((value) => {
      this.imagePath = value;
    }));
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.style.marginTop = "30px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const saveBtn = buttonContainer.createEl("button", { text: "💾 Lưu", cls: "mod-cta" });
    saveBtn.addEventListener("click", async () => {
      if (this.level % 10 !== 0) {
        new import_obsidian.Notice("Level phải chia hết cho 10 hoặc 100!");
        return;
      }
      if (!this.message.trim()) {
        new import_obsidian.Notice("Vui lòng nhập message!");
        return;
      }
      this.plugin.settings.customLevelMessages[this.level] = this.message;
      this.plugin.settings.customLevelImages[this.level] = this.imagePath;
      await this.plugin.saveSettings();
      new import_obsidian.Notice(`Đã lưu custom level ${this.level} cho Reward Hub!`);
      this.onSave();
      this.close();
    });
    const cancelBtn = buttonContainer.createEl("button", { text: "❌ Hủy" });
    cancelBtn.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}

class SpecialDateEditModal extends import_obsidian.Modal {
  constructor(app, plugin, onSave, editingDate) {
    super(app);
    this.date = "";
    this.message = "";
    this.imagePath = "";
    this.enabled = true;
    this.plugin = plugin;
    this.onSave = onSave;
    this.editingDate = editingDate;
    if (editingDate) {
      this.date = editingDate.date;
      this.message = editingDate.message;
      this.imagePath = editingDate.imagePath;
      this.enabled = editingDate.enabled;
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.editingDate ? "✏️ Sửa Ngày Đặc Biệt" : "➕ Thêm Ngày Đặc Biệt" });
    new import_obsidian.Setting(contentEl).setName("Ngày").setDesc("Ngày theo định dạng MM-DD (VD: 12-25 cho Giáng Sinh)").addText((text) => text.setPlaceholder("MM-DD").setValue(this.date).onChange((value) => {
      this.date = value;
    }));
    const commonDates = contentEl.createDiv({ cls: "common-dates" });
    commonDates.createEl("p", { text: "💡 Gợi ý ngày phổ biến:" });
    const suggestions = [
      { date: "01-01", name: "Tết Dương Lịch" },
      { date: "02-14", name: "Valentine" },
      { date: "03-08", name: "Ngày Quốc Tế Phụ Nữ" },
      { date: "04-30", name: "Ngày Giải Phóng" },
      { date: "05-01", name: "Ngày Quốc Tế Lao Động" },
      { date: "09-02", name: "Quốc Khánh Việt Nam" },
      { date: "10-20", name: "Ngày Phụ Nữ Việt Nam" },
      { date: "11-20", name: "Ngày Nhà Giáo Việt Nam" },
      { date: "12-25", name: "Giáng Sinh" }
    ];
    suggestions.forEach((suggestion) => {
      const btn = commonDates.createEl("button", {
        text: `${suggestion.date} (${suggestion.name})`,
        cls: "suggestion-btn"
      });
      btn.style.margin = "2px";
      btn.style.padding = "4px 8px";
      btn.style.fontSize = "0.8em";
      btn.addEventListener("click", () => {
        this.date = suggestion.date;
        this.message = `Chúc mừng ${suggestion.name}! 🎉`;
        this.onOpen();
      });
    });
    new import_obsidian.Setting(contentEl).setName("Thông báo").setDesc("Thông báo hiển thị trong ngày đặc biệt này").addTextArea((text) => {
      text.setValue(this.message);
      text.inputEl.rows = 3;
      text.onChange((value) => {
        this.message = value;
      });
    });
    new import_obsidian.Setting(contentEl).setName("Đường dẫn hình ảnh").setDesc("Đường dẫn đến file hình ảnh (tùy chọn)").addText((text) => text.setPlaceholder("https://example.com/image.jpg").setValue(this.imagePath).onChange((value) => {
      this.imagePath = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Kích hoạt").setDesc("Bật thông báo cho ngày này").addToggle((toggle) => toggle.setValue(this.enabled).onChange((value) => {
      this.enabled = value;
    }));
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container" });
    buttonContainer.style.marginTop = "30px";
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.justifyContent = "center";
    const saveBtn = buttonContainer.createEl("button", { text: "💾 Lưu", cls: "mod-cta" });
    saveBtn.addEventListener("click", async () => {
      if (!/^\d{2}-\d{2}$/.test(this.date)) {
        new import_obsidian.Notice("Ngày phải theo định dạng MM-DD!");
        return;
      }
      if (!this.message.trim()) {
        new import_obsidian.Notice("Vui lòng nhập thông báo!");
        return;
      }
      const newDate = {
        id: this.editingDate?.id || Date.now().toString(),
        date: this.date,
        message: this.message,
        imagePath: this.imagePath,
        enabled: this.enabled
      };
      if (this.editingDate) {
        const index = this.plugin.settings.specialDates.findIndex((d) => d.id === this.editingDate.id);
        if (index !== -1) {
          this.plugin.settings.specialDates[index] = newDate;
        }
      } else {
        this.plugin.settings.specialDates.push(newDate);
      }
      await this.plugin.saveSettings();
      new import_obsidian.Notice("Đã lưu ngày đặc biệt cho Reward Hub!");
      this.onSave();
      this.close();
    });
    const cancelBtn = buttonContainer.createEl("button", { text: "❌ Hủy" });
    cancelBtn.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}